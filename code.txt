import ast
import urllib.request
from tkinter import *
import importlib
import os

app_version = "1.4"


def check_internet():
    try:
        urllib.request.urlopen("http://google.com")
        return True
    except:
        return False


def version_control():
    version = requests.get(
        "https://raw.githubusercontent.com/chrissypants77/version-handler-and-updater/main/version.txt").text
    version = ast.literal_eval(version)
    if version != app_version:
        new_code = requests.get(
            "https://raw.githubusercontent.com/chrissypants77/version-handler-and-updater/main/code.txt").text

        with open(file="eisdielen_bestellung.py", mode="w", encoding="utf-8") as f:
            f.write(new_code)
            f.close()

        os.system("python eisdielen_bestellung.py")


if check_internet() is True:

    try:
        importlib.import_module("requests")
    except ImportError:
        import pip

        pip.main(['install', "requests"])
    finally:
        import requests

    version_control()
    internet = True
else:
    internet = False

app = Tk()
options = ["Himbeere",
           "Blaubeere",
           "Kirsche",
           "Melone",
           "Schokolade",
           "Stracciatella",
           "Haselnuss",
           "Rum-Traube"]
widgets = {"widgets": [], "placement": []}
confirm_widgets = []
order_id, time = 0, 0


def button(text=str(), font=None, command=None, which_list=None, width=None, height=None, extras=dict()):
    b1 = Button(text=text, font=font, height=height, width=width, command=command)
    if extras["placement_type"] == "pack":
        b1.pack(pady=extras["pady"])
    else:
        b1.place(x=extras["x"], y=extras["y"])
    if which_list is None:
        return b1
    if "widgets" in which_list:
        which_list["widgets"].append(b1)
        if extras["placement_type"] == "pack":
            which_list["placement"].append("pack")
            return
        which_list["placement"].append([extras["x"], extras["y"]])
    else:
        which_list.append(b1)


# font = ("font name", size, "extra")
# which_list = widgets or confirm_widgets
# extras - place = {"placement_type":"place", "x":int(), "y":int()}
# extras - pack = {"placement_type":"pack", "pady":int()}
# extras - after = {"after":[int(), lambda: (command)]}
def label(text=str(), font=None, fg=None, which_list=None, extras=dict()):
    global widgets
    l1 = Label(text=text, font=font, fg=fg)
    if extras["placement_type"] == "pack":
        l1.pack(pady=extras["pady"])
    else:
        l1.place(x=extras["x"], y=extras["y"])
    if extras["after"] is not False:
        l1.after(extras["after"]["time"], extras["after"]["command"])
    if which_list is None:
        return l1
    if "widgets" in which_list:
        which_list["widgets"].append(l1)
        if extras["placement_type"] == "pack":
            which_list["placement"].append("pack")
            return
        which_list["placement"].append([extras["x"], extras["y"]])
    else:
        which_list.append(l1)


def timer():
    global time, order_id
    order_timer_id = None
    if time == 0:
        order_info.after_cancel(order_info.after_idle(order_info))
        order_info.destroy()
        order_id += 1
        main_page()
        return
    time -= 1
    order_info.configure(text=f"Ihre Bestellung Wurde Aufgenomen\r\r"
                              f"Bestellungs ID: {order_id}\r\r"
                              f"Zurück zum Bestellungs Menu in: {time}")
    order_info.after(1000, lambda: (timer()))


def send_order():
    global widgets, confirm_widgets, time, order_info
    time = 10
    widgets = {"widgets": [], "placement": []}
    for i in confirm_widgets:
        i.destroy()
    confirm_widgets = []

    order_info = Label(text=f"Ihre Bestellung Wurde Aufgenomen\r\r"
                            f"Bestellungs ID: {order_id}\r\r"
                            f"Zurück zum Bestellungs Menu in: {time}", font=("Arial", 12, "bold"))
    order_info.pack()
    order_info.after(1000, lambda: (timer()))


def replace_main():
    for i in confirm_widgets:
        i.destroy()
    for i in range(0, len(widgets["widgets"])):
        if widgets["placement"][i] == "pack":
            widgets["widgets"][i].pack()
        else:
            widgets["widgets"][i].place(x=widgets["placement"][i][0], y=widgets["placement"][i][1])


def confirm_order(items):
    for i in widgets["widgets"]:
        i.place_forget()
        i.pack_forget()

    if items[3] == "Anzahl: 0":
        items[1] = "Sorte 2: /"
        items[3] = "Anzahl: /"

    if items[4] == "Extras:\r\r":
        items[4] = "Extras:\rKeine"

    if items[5] == "Anmerkungen:\r":
        items[5] += "Keine"

    label(text="Überischt über die bestellung",
          font=("Arial", 12, "bold"),
          which_list=confirm_widgets,
          extras={"placement_type": "pack", "pady": 0,
                  "after": False})
    overview = Message(text=f"{items[0]}\r{items[2]}\r\r{items[1]}\r{items[3]}\r\r{items[4]}\r\r{items[5]}",
                       font=("Arial", 11, "bold"))
    overview.pack()
    confirm_widgets.append(overview)

    button(text="Bestellung bearbeiten",
           font=("Arial", 12, "bold"),
           command=lambda: (replace_main()),
           which_list=confirm_widgets,
           extras={"placement_type": "pack", "pady": 4})

    button(text="Bestellung abgeben",
           font=("Arial", 12, "bold"),
           command=lambda: (send_order()),
           which_list=confirm_widgets,
           extras={"placement_type": "pack", "pady": 7})


def check_amount(which):
    am_1_2 = amount_var_int.get() + amount_var_int2.get()
    if which == "1":
        while am_1_2 >= 7:
            if am_1_2 >= 7:
                amount_var_int.set(amount_var_int.get() - 1)
                am_1_2 = amount_var_int.get() + amount_var_int.get()
    else:
        while am_1_2 >= 7:
            if am_1_2 >= 7:
                amount_var_int2.set(amount_var_int2.get() - 1)
                am_1_2 = amount_var_int.get() + amount_var_int2.get()


def main_page():
    global amount_var_int, amount_var_int2
    label(text="Eisbecher-Bestellung",
          font=("Arial", 12, "bold"),
          which_list=widgets,
          extras={"placement_type": "pack", "pady": 0,
                  "after": False})

    label(text="Wählen sie die Sorte aus",
          which_list=widgets,
          extras={"placement_type": "pack", "pady": 0,
                  "after": False})

    label(text="Erste Sorte",
          which_list=widgets,
          extras={"placement_type": "place", "x": 30, "y": 55,
                  "after": False})

    label(text="Zweite Sorte\r(nicht pflicht)",
          which_list=widgets,
          extras={"placement_type": "place", "x": 190, "y": 55,
                  "after": False})

    choice_var_str = StringVar()
    choice_var_str.set(options[0])
    choice_select = OptionMenu(app, choice_var_str, *options)
    choice_select.place(x=10, y=90)
    widgets["widgets"].append(choice_select)
    widgets["placement"].append([10, 90])

    choice_var_str2 = StringVar()
    choice_var_str2.set(options[0])
    choice_select2 = OptionMenu(app, choice_var_str2, *options)
    choice_select2.place(x=180, y=90)
    widgets["widgets"].append(choice_select2)
    widgets["placement"].append([180, 90])

    label(text="Kugel Anzahl Auswählen\rMaximum sind\r6 insgesamt",
          which_list=widgets,
          extras={"placement_type": "place", "x": 80, "y": 145,
                  "after": False})

    amount_var_int = IntVar()
    amount_spinbox = Spinbox(from_=1,
                             to=6,
                             textvariable=amount_var_int,
                             wrap=True,
                             width=10,
                             command=lambda: (check_amount("1")))
    amount_spinbox.place(x=13, y=170)
    widgets["widgets"].append(amount_spinbox)
    widgets["placement"].append([13, 170])

    amount_var_int2 = IntVar()
    amount_spinbox2 = Spinbox(from_=0,
                              to=5,
                              textvariable=amount_var_int2,
                              wrap=True,
                              width=10,
                              command=lambda: (check_amount("2")))
    amount_spinbox2.place(x=200, y=170)
    widgets["widgets"].append(amount_spinbox2)
    widgets["placement"].append([200, 170])

    label(text="Zusätze",
          which_list=widgets,
          extras={"placement_type": "place", "x": 125, "y": 210,
                  "after": False})

    extras_var_str = StringVar()
    extras_checkbutton = Checkbutton(text="Schokosauce", onvalue="Schokosauce", offvalue="", variable=extras_var_str)
    extras_checkbutton.place(x=98, y=230)
    widgets["widgets"].append(extras_checkbutton)
    widgets["placement"].append([98, 230])

    extras_var_str2 = StringVar()
    extras_checkbutton2 = Checkbutton(text="Erdbeeren", onvalue="Erdbeeren", offvalue="", variable=extras_var_str2)
    extras_checkbutton2.place(x=98, y=250)
    widgets["widgets"].append(extras_checkbutton2)
    widgets["placement"].append([98, 250])

    label(text="Anmerkungen",
          which_list=widgets,
          extras={"placement_type": "place", "x": 108, "y": 290,
                  "after": False})

    notes_entry = Text(width=20, height=3)
    notes_entry.place(x=67, y=315)
    widgets["widgets"].append(notes_entry)
    widgets["placement"].append([67, 315])

    button(text="Bestellen",
           font=("Arial", 12, "bold"),
           width=10, height=2,
           command=lambda: confirm_order(["Sorte 1: " + choice_var_str.get(),
                                          "Sorte 2: " + choice_var_str2.get(),
                                          "Anzahl: " + str(amount_var_int.get()),
                                          "Anzahl: " + str(amount_var_int2.get()),
                                          "Extras:\r" + extras_var_str.get() + "\r" + extras_var_str2.get(),
                                          "Anmerkungen:\r" + notes_entry.get("1.0", "end-1c")]),
           which_list=widgets,
           extras={"placement_type": "place", "x": 96, "y": 386})


def main():
    wait_time = 2000
    ver = label(text=f"Created by: chris\r\rVersion {app_version}",
                font=("Arial", 12, "bold"),
                which_list=None,
                extras={"placement_type": "pack", "pady": 1,
                        "after": False})
    if internet is False:
        internet_error = label(text=f"OFFLINE\rcant check version\rusable but beware of bugs!!",
                               font=("Arial", 14, "bold"),
                               fg="red",
                               which_list=None,
                               extras={"placement_type": "pack", "pady": 10,
                                       "after": False})
        wait_time += 1500
    app.after(wait_time, lambda: (ver.destroy(), internet_error.destroy(), main_page()))


def tkinter_config():
    app.geometry("300x450")
    app.wm_resizable(False, False)
    app.title("Deez-Eisdiele")
    app.attributes("-topmost", True)


tkinter_config()
main()
app.mainloop()
